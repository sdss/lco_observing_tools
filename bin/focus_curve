#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# @Author: José Sánchez-Gallego (gallegoj@uw.edu)
# @Date: 2022-08-21
# @Filename: focus_curve
# @License: BSD 3-clause (http://www.opensource.org/licenses/BSD-3-Clause)

from __future__ import annotations

import contextlib
import os
import pathlib
import socket

import click
import matplotlib
from matplotlib import pyplot as plt
from sdsstools import get_logger
from sdsstools.time import get_sjd

from lco_observing_tools.focus import (
    calculate_median,
    fit_parabola,
    get_seqno,
    plot_focus_curve,
    process_mjd,
)


@click.command(name="focus-curve")
@click.argument("MJD", type=int, required=False)
@click.argument("START", type=int, required=False)
@click.argument("END", type=int, required=False)
@click.option("--last", type=int, help="Uses the last N images for this MJD.")
def focus_cli(
    mjd: int,
    start: int | None = None,
    end: int | None = None,
    last: int | None = None,
):
    """Generate and plot a focus curve."""

    log = get_logger("focus_curve")

    if socket.gethostname().startswith("sdss5"):
        matplotlib.use("TKAgg")

    if mjd is None:
        # sdsstools get_sjd() prints the SJD.
        with contextlib.redirect_stdout(open(os.devnull, "w")):
            mjd = int(get_sjd("LCO"))

    if last is not None:
        gcam = pathlib.Path(f"/data/gcam/{mjd}")
        files = gcam.glob("gimg-gfa[1-6]s-[0-9][0-9][0-9][0-9].fits")

        max_seqno = 0
        for file in files:
            seq_no = get_seqno(file)
            if seq_no > max_seqno:
                max_seqno = seq_no

        start = max_seqno - last
        end = max_seqno

    if start is None or end is None:
        raise click.UsageError("Use --last or provide START and END sequence numbers.")

    # Determine offset between GFA and FPS.
    wok_calib_dir = os.environ.get("WOKCALIB_DIR", None)
    offset_path = os.path.join(wok_calib_dir, "focus_offset") if wok_calib_dir else None
    offset = 0
    if wok_calib_dir is None:
        log.warning("$WOKCALIB_DIR not defined. Using offset=0.")

    else:
        if offset_path and os.path.exists(offset_path):
            lines = open(offset_path).read().splitlines()
            for line in lines:
                if line.strip().startswith("#") or line.strip() == "":
                    continue
                offset = float(line.strip())
                break

    if offset != 0:
        log.warning(f"Using an FPS-GFA offset of {offset} microns.")

    data = process_mjd(mjd, start, end)
    plot_focus_curve(data, interactive=False, offset=offset)

    print()
    print("Results:")
    medians = calculate_median(data)
    medians.index += offset
    print(medians.sort_index())
    print()

    a, b, c = fit_parabola(data)
    print(f"M2 position at best focus: {-b / 2 / a + offset:.0f} microns")

    plt.show()


if __name__ == "__main__":
    focus_cli()
